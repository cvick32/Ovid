(declare-fun a () (Array Int Int))
(declare-fun a_next () (Array Int Int))
(define-fun .a () (Array Int Int) (! a :next a_next))

(declare-fun b () (Array Int Int))
(declare-fun b_next () (Array Int Int))
(define-fun .b () (Array Int Int) (! b :next b_next))

(declare-fun i () Int)
(declare-fun i_next () Int)
(define-fun .i () Int (! i :next i_next))
(declare-fun j () Int)
(declare-fun j_next () Int)
(define-fun .j () Int (! j :next j_next))
(declare-fun x () Bool)
(declare-fun x_next () Bool)
(define-fun .x () Bool (! x :next x_next))
(declare-fun N () Int)
(declare-fun N_next () Int)
(define-fun .N () Int (! N :next N_next))

(declare-fun Z () Int)
(declare-fun Z_next () Int)
(define-fun .Z () Int (! Z :next Z_next))



(define-fun init-conditions () Bool (!
 (and
  (= i 0)
  (> N 0)
  (= a ((as const (Array Int Int)) 0))
  (= b ((as const (Array Int Int)) 1))
) :init true))

(define-fun trans-conditions () Bool (!
 (and
  (=> (and (< i N))
      (and
       (= (store a i 1) a_next)
       (=> x (= b_next (store b j (select a i))))
       (=> (not x) (= b_next (store b j (select a (+ 1 i)))))
       (= (+ i 1) i_next)))
  (< j N)
  (>= j 0)
  (= N N_next)
  (= Z Z_next)
) :trans true))

(define-fun property () Bool
  (!
   (=> (and (>= Z 0) (< Z N) (>= i N))
       (<= (select b Z) 1))
   :invar-property 0))

